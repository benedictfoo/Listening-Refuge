---
// src/pages/emotions/[emotion]/page/[page].astro

import {getCollection, type CollectionEntry} from 'astro:content';

import PostGridLayout from '../../../layouts/PostGridLayout.astro';
import PaginationButtons from '../../../components/PaginationButtons.astro';

import {POSTS_PER_PAGE} from "../../../consts";
import BaseLayout from "../../../layouts/BaseLayout.astro";


export async function getStaticPaths({paginate}) {
    const all = await getCollection('blog');

    // Group posts by emotion
    const groups = all.reduce<Record<string, CollectionEntry<'blog'>[]>>((acc, post) => {
        post.data.emotions.forEach(t => (acc[t] ||= []).push(post));
        return acc;
    }, {});

    return Object.entries(groups).flatMap(([emotion, posts]) => {
        const sorted = posts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
        const sliced = sorted.slice(POSTS_PER_PAGE);

        const paginated = paginate(sorted, {
            pageSize: POSTS_PER_PAGE,
            params: {emotion},
        });

        return paginated
            .slice(1)
            .map((pageObj, idx) => ({
                ...pageObj,
                params: {emotion, page: String(idx + 2)},
            }));

    });
}

const {page} = Astro.props as {
    page: { data: CollectionEntry<'blog'>[]; currentPage: number; lastPage: number };
    emotion: string;
};
const {emotion} = Astro.params;

const currPage = page.currentPage;
const totalPages = page.lastPage;
const title = `Songs that evoke: ${emotion}`
const description = `Find a song which fits a particular emotion`
---

<BaseLayout title={title} description={description}>

    <PostGridLayout title={title} posts={page.data}/>
    {totalPages > 1 && (
            <PaginationButtons
                    currPage={currPage}
                    lastPage={totalPages}
                    baseHref={`/emotions/${emotion}`}
            />)}
</BaseLayout>
